# Docker Swarm deployment configuration for LLM Summarizer Service
# Production deployment with high availability and scaling

version: '3.8'

services:
  # Redis service with persistence
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - llm-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s

  # LLM Summarizer API service
  api:
    image: llm-summarizer:latest
    environment:
      # Application Configuration
      - APP_NAME=LLM Summarizer Service
      - ENVIRONMENT=production
      - DEBUG=false
      
      # API Configuration
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_KEYS_ALLOWED=["${API_KEY_1}","${API_KEY_2}"]
      
      # LLM Provider Configuration
      - LLM_PROVIDER=openai
      - PROVIDER_API_KEY=${OPENAI_API_KEY}
      
      # Summary Configuration
      - SUMMARY_MAX_TOKENS=150
      - LANG_DEFAULT=auto
      - MAX_TEXT_LENGTH=50000
      
      # Timeout and Retry Configuration
      - REQUEST_TIMEOUT_MS=10000
      - LLM_TIMEOUT_MS=8000
      - MAX_RETRIES=2
      - RETRY_DELAY_MS=1000
      
      # Rate Limiting
      - ENABLE_RATE_LIMIT=true
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=3600
      
      # Redis Configuration
      - REDIS_URL=redis://redis:6379/0
      - REDIS_TTL=3600
      
      # Security
      - CORS_ORIGINS=["*"]
      - MAX_PAYLOAD_SIZE=1048576
      
      # Logging
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
    networks:
      - llm-network
    depends_on:
      - redis
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 5s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        max_replicas_per_node: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.api.rule=Host(`api.yourdomain.com`)"
        - "traefik.http.routers.api.tls=true"
        - "traefik.http.routers.api.tls.certresolver=letsencrypt"
        - "traefik.http.services.api.loadbalancer.server.port=8000"
        - "traefik.http.middlewares.api-ratelimit.ratelimit.burst=20"
        - "traefik.http.middlewares.api-ratelimit.ratelimit.average=10"
        - "traefik.http.routers.api.middlewares=api-ratelimit"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v1/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx load balancer (alternative to Traefik)
  nginx:
    image: nginx:alpine
    configs:
      - source: nginx_config
        target: /etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "443:443"
    networks:
      - llm-network
    depends_on:
      - api
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    profiles:
      - nginx

  # Traefik reverse proxy and load balancer
  traefik:
    image: traefik:v3.0
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@yourdomain.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--metrics.prometheus=true"
      - "--accesslog=true"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/letsencrypt
    networks:
      - llm-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    profiles:
      - traefik

  # Redis Commander for management
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-admin123}
    networks:
      - llm-network
    depends_on:
      - redis
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.redis-commander.rule=Host(`redis.yourdomain.com`)"
        - "traefik.http.routers.redis-commander.tls=true"
        - "traefik.http.services.redis-commander.loadbalancer.server.port=8081"
    profiles:
      - tools

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
    volumes:
      - prometheus_data:/prometheus
    networks:
      - llm-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.prometheus.rule=Host(`prometheus.yourdomain.com`)"
        - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - llm-network
    depends_on:
      - prometheus
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.rule=Host(`grafana.yourdomain.com`)"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    profiles:
      - monitoring

# Configuration files
configs:
  nginx_config:
    external: true
  prometheus_config:
    external: true

# Persistent volumes
volumes:
  redis_data:
    driver: local
  traefik_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  llm-network:
    driver: overlay
    attachable: true
